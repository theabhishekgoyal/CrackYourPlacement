/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
     ListNode* middleList(ListNode* head){
        ListNode* slow = head;
        ListNode* fast = head->next;
        while(fast!=NULL && fast->next!= NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
     }
     ListNode* reverseList(ListNode* head){
        ListNode* prev = NULL;
        ListNode* curr = head;
        while(curr!=NULL){
            ListNode* temp = curr->next;
            curr->next = prev;
            prev = curr;
            curr = temp;
        }
        return prev;
     }
     void merge2List(ListNode* list1, ListNode* list2){
        while(list1!=NULL && list2!=NULL){
        ListNode* list1_next = list1->next;
        ListNode* list2_next = list2->next;
        list1->next = list2;
        if(list1_next == NULL){
            break;
        }
        list2->next = list1_next;
        list1= list1_next;
        list2= list2_next;
        }
     }
    void reorderList(ListNode* head) {
        if(head==NULL || head->next ==NULL)
        return;
        // step 1
        ListNode*middle = middleList(head);
        // step 2
        ListNode* secondList = reverseList(middle->next);
        middle->next = NULL;
        // step 3
         merge2List(head, secondList);
    }
};
